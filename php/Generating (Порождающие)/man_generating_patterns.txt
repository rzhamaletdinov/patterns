Гитхаб
https://github.com/Webtoucher/php-design-patterns/tree/master/Creational

/************************************
Singleton (Одиночка)
-------------------------------------
Создает объект гарантированно в единственном экземпляре
Первый раз создаем и сохраняем в private переменную
Дальше вытаскиваем из переменной static методом

/************************************
Registry (Реестр)
-------------------------------------
хэш-таблица
Если грубо - замена глобальным переменным)
создаем хранилище ключ-значение
взаимодействие через static function

/************************************
Factory method (Фабричный метод)
-------------------------------------
один интерфейс имплементируется в несколько классов-фабрик,
метод интерфейса отвечает за создание объекта нужного класса
детали создания описывается в конкретном классе-фабрике.
но метод должен называться одинаково ДЛЯ ВСЕХ

/************************************
Abstract Factory (Абстрктная фабрика)
-------------------------------------
есть несколько однотипных фабрик
нужно инкапсулировать логику выбора, конкретной фабрики
(какую из фабрик использовать для той или иной задачи)
Создаем abstract class фабрики
там задаем static методы логики выбора конкретной фабрики
процесс переключения текущей фабрики отделен от самого создания объекта
При непосредственно вызове фабричного метода 
абстрактная фабрика сама проверяет настройки конфигурации 
и возвращает подходящую фабрику.
Нам не приходится заботится о том, какую фабрику взять. 

/************************************
Prototype (Прототип)
-------------------------------------
Некоторые объекты приходится создавать многократно.
Инициализируем в __construst и сохраняем в private объект-прототип
в дальнейшем на getObject возвращаем clone сохраненного прототипа

/************************************
Lazy Initialization (Ленивая инициализация)
-------------------------------------
типа кэш
Если несколько раз вызывается тяжелое вычисление, 
а условия вычисления не меняются.
То вычисляем первый раз, а потом сохраняем в private переменную
и при повторном вычислении сразу возвращаем результат из переменной

/************************************
Multiton (Пул одиночек)
-------------------------------------
Частный случай реестра
хэш, в который можно складывать синглтон-объекты 
и доставать их оттуда при необходимости (!сохраняется только один экземпляр каждого объекта)

/************************************
Object pool (Пул объектов)
-------------------------------------
Частный случай реестра
хэш, в который можно складывать инициализированные объекты 
и доставать их оттуда при необходимости (!сохраняется каждый экземпляр каждого объекта)

/************************************
Builder (Строитель)
-------------------------------------
мы хотим инкапсулировать из фабрики создание сложного объекта.
В фабричном методе, создающем объект мы делегируем создание объекта нужному классу-строителю