<?php

/**
 * Паттерн Adapter
 *
 * *********Задача
 * Система поддерживает требуемые данные и поведение, но имеет неподходящий интерфейс.
 *
 * *********Способ решения
 * Адаптер предусматривает создание класса-оболочки с требуемым интерфейсом.
 *
 * *********Участники
 * Класс Adapter приводит интерфейс класса Adaptee
 * в соответствие с интерфейсом класса Target (наследником которого является Adapter).
 * Это позволяет объекту Client использовать объект Adaptee (посредством адаптера Adapter) так,
 * словно он является экземпляром класса Target.
 * Таким образом Client обращается к интерфейсу Target, реализованному в наследнике Adapter,
 * который перенаправляет обращение к Adaptee.
 *
 * ********Следствия
 * Шаблон Адаптер позволяет включать уже существующие объекты в новые объектные структуры,
 * независимо от различий в их интерфейсах.
 *
 * ********Замечания и комментарии
 * Шаблон Адаптер позволяет в процессе проектирования
 * не принимать во внимание возможные различия в интерфейсах
 * уже существующих классов.
 * Если есть класс, обладающий требуемыми методами и свойствами
 * (по крайней мере, концептуально),
 * то при необходимости всегда можно воспользоваться шаблоном Адаптер
 * для приведения его интерфейса к нужному виду.
 * Близким Адаптеру является шаблон Фасад, не всегда можно отличить один от другого
 *
 * ********Применение
 * Типичным примером использования шаблона Адаптер
 * можно назвать создание классов,
 * приводящих к единому интерфейсу функции языка PHP
 * обеспечивающие доступ к различным СУБД.
 *
 * ********Реализация
 * Включение уже существующего класса в другой класс.
 * Интерфейс включающего класса приводится в соответствие с новыми требованиями,
 * а вызовы его методов преобразуются в вызовы методов включённого класса.
 */

class Hello {

    private $_name;
    private $_hello = 'Здравствуйте';

    function __construct($name) {
        $this->_name = $name;
    }
 
    function getName() {
        return $this->_name;
    }
 
    function getHello() {
        return $this->_hello;
    }
}
 
class HelloAdapter {
    private $aHellow;
 
    function __construct(Hello $aSearch) {
        $this->aHellow = $aSearch;
    }
 
    function getFullHellow() {
        return $this->aHellow->getHello() . ', ' . $this->aHellow->getName() . '! Мы рады Вас видеть!' . "\n";
    }
}
 
$hellow         = new Hello("Руслан");
$hellowAdapter  = new HelloAdapter($hellow);
echo $hellowAdapter->getFullHellow();