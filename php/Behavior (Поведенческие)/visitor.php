<?php
/**
 * Посетитель (visitor)
 * описывает операцию,
 * которая выполняется над объектами других классов.
 * При изменении visitor нет необходимости изменять обслуживаемые классы.
 *
 * Шаблон демонстрирует
 * классический приём восстановления информации о потерянных типах,
 * не прибегая к понижающему приведению типов.
 *
 * ***********Решаемая проблема
 * Необходимо сделать какие-то несвязные операции над рядом объектов,
 * но нужно избежать загрязнения их кода.
 * И нет возможности или желания запрашивать тип каждого узла
 * и осуществлять приведение указателя к правильному типу,
 * прежде чем выполнить нужную операцию.
 *
 * ***********Задача
 * Над каждым объектом некоторой структуры выполняется
 * одна или более операций.
 * Нужно определить новую операцию,
 * не изменяя классы объектов.
 *
 * ***********Решение
 * Для независимости посетитель имеет отдельную иерархию.
 * Структуры имеют некий интерфейс взаимодействия.
 *
 * ***********Использование
 * Если есть вероятность изменения иерархии обслуживаемого класса,
 * либо она будет нестабильной или открытый интерфейс достаточно эффективен для доступа шаблона,
 * то его использование будет вредоносным.
 * Создается базовый класс Visitor с методами visit()
 * для каждого подкласса родительского Element.
 * Добавьте метод accept(visitor) в иерархию Element.
 * Для каждой операции,
 * которая должна выполняться для объектов Element,
 * создайте производный от Visitor класс.
 * Реализации метода visit() должны использовать
 * открытый интерфейс класса Element.
 * В результате:
 * клиенты создают объекты Visitor
 * и передают их каждому объекту Element,
 * вызывая accept().
 *
 * **********Рекомендации
 * Шаблон следует использовать, если:
 *      =имеются различные объекты разных классов с разными интерфейсами,
 * но над ними нужно совершать операции, зависящие от конкретных классов;
 *      =необходимо над структурой выполнить различные, усложняющие структуру операции;
 *      =часто добавляются новые операции над структурой.
 *
 * **********Преимущества:
 * упрощается добавление новых операций;
 * объединение родственных операции в классе Visitor;
 * класс Visitor может запоминать в себе какое-то состояние по ходу обхода контейнера.
 *
 * *********Недостатки:
 * затруднено добавление новых классов,
 * поскольку нужно обновлять иерархию посетителя и его сыновей.
 *
 * 
 */

