/************************************
Chain of Responsibility (Цепочка обязанностей)
-------------------------------------

/************************************
Command (Команда)
-------------------------------------

/************************************
Interpreter (Интерпретатор)
-------------------------------------

/************************************
Iterator (Итератор)
-------------------------------------

Позволяет перебирать объекты не вникая в их сущность.
Применим к массивам, спискам (двусвязным, односвязным),
дереьвьям и т.д.

Храним в итераторе указатель на текущую позици
метод, проверяющий, доступен ли след элемент
метод, перехода к след элементу.

юзая это в цикле while бегаем по объектам

Хитрожопый пример - лаба на С++ с кольцевым двусвязным списком.

/************************************
Mediator (Посредник)
-------------------------------------

/************************************
Memento (Хранитель)
-------------------------------------

/************************************
Observer (Наблюдатель)
-------------------------------------

Если нам надо оповещать несколько объектов о нужных событиях
т.е. что при событии у всех объектов вызывался метод "событие произошло"

Делаем объект-центр(SplSubject)
у него метод "подписаться", "отписаться"
(в них передаем объекты, которые надо оповестить -
они складываются в protected_list внутри Subject)

при определенном событии внутри центра
вызываем метод notify,
который пробегается по всему листу
и вызывает у каждого объекта нужную логику.
тем самым "оповещая" подписанный объект

пример - чат

/************************************
State (Состояние)
-------------------------------------

/************************************
Strategy (Стратегия)
-------------------------------------

/************************************
Template Method (Шаблонный метод)
-------------------------------------

/************************************
Visitor (Посетитель)
-------------------------------------
