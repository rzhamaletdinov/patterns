<?php
/**
 * Интерпретатор (Interpreter) — решает часто встречающуюся,
 * но подверженную изменениям, задачу.
 * Также известен как Little (Small) Language
 *
 ************Проблема
 * Имеется часто встречающаяся, подверженная изменениям задача.
 *
 * **********Решение
 * Создать интерпретатор, который решает данную задачу.
 *
 * **********Преимущества
 * Грамматику становится легко расширять и изменять,
 * реализации классов,
 * описывающих узлы абстрактного синтаксического дерева похожи
 * (легко кодируются).
 * Можно легко изменять способ вычисления выражений.
 *
 * **********Недостатки
 * Сопровождение грамматики с большим числом правил затруднительно.
 *
 * **********Пример
 * Задача поиска строк по образцу может быть решена посредством создания интерпретатора,
 * определяющего грамматику языка.
 * "Клиент" строит предложение в виде абстрактного синтаксического дерева,
 * в узлах которого находятся объекты классов
 * "НетерминальноеВыражение" и "ТерминальноеВыражение" (рекурсивное),
 * затем "Клиент" инициализирует контекст и вызывает операцию Разобрать(Контекст).
 * На каждом узле типа "НетерминальноеВыражение" определяется операция
 * Разобрать для каждого подвыражения.
 * Для класса "ТерминальноеВыражение" операция Разобрать определяет базу рекурсии.
 * "АбстрактноеВыражение" определяет абстрактную операцию Разобрать,
 * общую для всех узлов в абстрактном синтаксическом дереве.
 * "Контекст" содержит информацию,
 * глобальную по отношению к интерпретатору.
 *
 * **********Особенности
 * Абстрактное синтаксическое дерево интерпретатора – пример паттерна Composite.
 * Для обхода узлов дерева может применяться паттерн Iterator.
 * Терминальные символы могут разделяться c помощью Flyweight.
 * Паттерн Interpreter не рассматривает вопросы синтаксического разбора.
 * Когда грамматика очень сложная, должны использоваться другие методики.
 *
 */
